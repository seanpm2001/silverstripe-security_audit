<?php
/**
 * Logs each started PHP-session to the database,
 * using the SessionID generated by PHP as a unique identifier.
 * Stores the current IP-address and MemberID (if present).
 * Useful for websites which need some form of logging for audits.
 * 
 * CAUTION: Can produce large recordsets.
 */
class SessionLogEntry extends DataObject {
	
	/**
	 * Enable logging (disabled by default).
	 *
	 * @var boolean
	 */
	protected static $enabled = false;
	
	/**
	 * Specifies URL-segments where session-logging
	 * shouldn't start
	 *
	 * @var array
	 */
	public static $exclude_url_rules = array(
		'/^\/?db\/build/', 
	);
	
	static $db = array(
		'SessionID' => 'Varchar(32)',
		'IPAddress' => 'Varchar(15)',
		'ForwardedAddress' => 'Varchar(15)',
		'Expires' => 'Datetime',
		'Ended' => 'Datetime',
		'UserAgent' => 'Text'
	);
	
	static $has_one = array(
		'Member' => 'Member'
	);
	
	static $indexes = array(
		'SessionID' => true
	);
	
	/**
	 * Factory-method that automatically sets
	 * information about the user and connection.
	 *
	 * @param int $expires
	 * @return boolean
	 */
	static function start($expires) {
		if(!self::$enabled) return false;
		
		if(!ClassInfo::hasTable('SessionLogEntry')) return false;
		
		if(!self::valid_url(Director::baseURL())) return false;
		
		$SQL_sessionID = Convert::raw2sql(session_id());
		$currentEntry = DataObject::get_one('SessionLogEntry', "SessionID = '$SQL_sessionID' AND `Expires` > NOW() AND `Ended` IS NULL");
		
		if(session_id() && !$currentEntry) {
			$sessionLogEntry = new SessionLogEntry();
			$sessionLogEntry->SessionID = session_id();
			$sessionLogEntry->UserAgent = !empty($_SERVER['HTTP_USER_AGENT']) ? $_SERVER['HTTP_USER_AGENT'] : 'Unknown';
			$sessionLogEntry->Expires = date('Y-m-d H:i:s', time() + $expires);
			$sessionLogEntry->MemberID = Member::currentUserID();
			$sessionLogEntry->IPAddress = $_SERVER['REMOTE_ADDR'];
			if(!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) $sessionLogEntry->ForwardedAddress = $_SERVER['HTTP_X_FORWARDED_FOR'];
			$sessionLogEntry->write();
			
			return true;
		} else {
			return false;
		}
		
	}
	
	/**
	 * Finish the current session (and write the ending time).
	 * 
	 * @return boolean
	 */
	static function stop() {
		$SQL_sessionID = Convert::raw2sql(session_id());
		
		return DB::query("
			UPDATE `SessionLogEntry` 
				SET `Ended` = NOW() 
			WHERE `SessionID` = '$SQL_sessionID' 
				AND `Ended` IS NULL
				AND `Expires` >= NOW()
		");
	}
	
	static function valid_url($url) {
		foreach(self::$exclude_url_rules as $rule) {
			if(preg_match($rule, $url)) return false;
		}
		
		return true;
	}
	
	function getIP() {
		if($this->ForwardedAddress) return "$this->ForwardedAddress (via $this->IPAddress)";
		else return $this->IPAddress;
	}
	
	function enable() {
		self::$enabled = true;
	}

	function disable() {
		self::$enabled = true;
	}
	
	function clearOlderRecord(){
		$sql = "Delete FROM `SessionLogEntry` WHERE Created + INTERVAL 180 DAY < NOW()";
		DB::query($sql);
	}
}
?>